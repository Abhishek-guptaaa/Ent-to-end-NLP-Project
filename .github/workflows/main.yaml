# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions
# More info on Python, GitHub Actions, and Azure App Service: https://aka.ms/python-webapps-actions

name: workflow

on:
  push:
    branches:
      - main
  paths-ignore:
      - 'README.md'
permissions:
  id-token: write
  contents: read
jobs:
  intergration:
    name:Countinous Intergration
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code  
        uses: actions/checkout@v3

      - name: Lint code
        run : echo "Linting repository"
      
      - name: Run unit tests
        run: echo "Running unit tests"

  build-and-puch-ecr-image:
    name: Countinous Delivery
    needs: intergration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code  
        uses: actions/checkout@v3

      
      - name: Install Utilities
        run:
          sudo apt-get update
          sudo apt-get install -y jq unzip
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: {{secret.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{secret.AWS_REGION}}

      - name: Login to Amazon ecr
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ecr
        id: build-image
        env:
          ECR_REGISTRY: ${{steps.login.ecr.outputs.registry}}
          ECR_REPOSITORY: ${{secret.ECR_REPOSITORY_NAME}}
          IMAGE_TAG: latest
        run:
          # Build a docker conatainer and 
          # push it to ECR so that it con
          # be deployed to ECR.
          docker build -t $ ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG .
          docker push $ ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::#ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  Countinous-Deployment:
    needs: build-and-push-ecr-image
    runs-on: self-hosted  
     steps:
      - name: Checkout Code  
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: {{secret.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{secret.AWS_REGION}}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Pull latest images
      run:
        docker pull ${{secret.AWS_ECR_LOGIN_URI}}/{{secret.ECR_REPOSITORY_NAME}}:latest

      # -name Stop and remove conatainer if Running
      # run :

      name: Run Dcoker image to serve users
      run:
        docker run -d -p 8080:8080 --name=texts -e 'AWS_ACCESS_KEY_ID=${{secret.AWS_ACCESS_KEY_ID}}' -e 'AWS_SECRET_ACCESS_KEY=${{secret.AWS_SECRET_ACCESS_KEY}}'
    - name: Clean previous image and conatainers
      run:
        docker system prune -f




  